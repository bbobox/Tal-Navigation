.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::YaTeA::OptionSet 3pm"
.TH Lingua::YaTeA::OptionSet 3pm "2015-01-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::YaTeA::OptionSet \- Perl extension for handling option set in
YaTeA
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Lingua::YaTeA::OptionSet;
\&  Lingua::YaTeA::OptionSet\->new();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for handling option set. The list of
options is stored in the field \f(CW\*(C`OPTIONS\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
The method creates a empty option set. The list of options is stored
in the field \f(CW\*(C`OPTIONS\*(C'\fR. It sets the default value \f(CW\*(C`default\*(C'\fRof the
option \f(CW\*(C`suffix\*(C'\fR.
.SS "\fIaddOptionSet()\fP"
.IX Subsection "addOptionSet()"
.Vb 1
\&   addOptionSet($options_set_h,$message_set,$display_language);
.Ve
.PP
The method adds the options defined in a hashtable to the option
set. \f(CW$options_set_h\fR is the reference to the hashtable of the
options.
.PP
The variables \f(CW$message_set\fR and \f(CW$display_language\fR are used for
displaying a warning or error message.
.SS "\fIaddOption()\fP"
.IX Subsection "addOption()"
.Vb 1
\&    addOption($name,$value,$message_set,$display_language);
.Ve
.PP
The method add or updates the option \f(CW$name\fR with the value \f(CW\*(C`value\*(C'\fR.
.PP
The variables \f(CW$message_set\fR and \f(CW$display_language\fR are used for
displaying a warning or error message.
.SS "\fIcheckCompulsory()\fP"
.IX Subsection "checkCompulsory()"
.Vb 1
\&    checkCompulsory($option_list)
.Ve
.PP
This method checks if the options given in \f(CW$option_list\fR are defined
in the option set.
.PP
The variable \f(CW$option_list\fR is a string and contains the list of
option names separated by commas.
.SS "\fIis_disable()\fP"
.IX Subsection "is_disable()"
.Vb 1
\&    is_disable($name);
.Ve
.PP
The method indicates if the option \f(CW$name\fR is disable.
.PP
It returns \f(CW1\fR if the option is disable, \f(CW0\fR else.
.SS "\fIis_enable()\fP"
.IX Subsection "is_enable()"
.Vb 1
\&    is_enable($name);
.Ve
.PP
The method indicates if the option \f(CW$name\fR is enable.
.PP
It returns \f(CW1\fR if the option is enable, \f(CW0\fR else.
.SS "\fIoptionExists()\fP"
.IX Subsection "optionExists()"
.Vb 1
\&    oprionExists($name);
.Ve
.PP
The method indicates if the option \f(CW$name\fR exists.
.PP
It returns the object if the option exists, \f(CW0\fR else.
.SS "\fIgetOption()\fP"
.IX Subsection "getOption()"
.Vb 1
\&    getOption($name);
.Ve
.PP
The method returns the option object referred by \f(CW$name\fRif the option
name exists, or die.
.SS "\fIgetOptions()\fP"
.IX Subsection "getOptions()"
.Vb 1
\&    getOptions();
.Ve
.PP
The method returns the hashtable of the options.
.SS "\fIgetLanguage()\fP"
.IX Subsection "getLanguage()"
.Vb 1
\&    getLanguage();
.Ve
.PP
The method returns the value of the \f(CW\*(C`language\*(C'\fR option.
.SS "\fIgetChainedLinks()\fP"
.IX Subsection "getChainedLinks()"
.Vb 1
\&    getChainedLinks();
.Ve
.PP
The method returns the value \f(CW1\fR if the option named \f(CW\*(C`chained\-links\*(C'\fR
is set, \f(CW0\fR else.
.SS "\fIgetSentenceBoundary()\fP"
.IX Subsection "getSentenceBoundary()"
.Vb 1
\&    getSentenceBoundary();
.Ve
.PP
The method returns the value of the \f(CW\*(C`SENTENCE_BONDARY\*(C'\fR option.
.SS "\fIgetDocumentBoundary()\fP"
.IX Subsection "getDocumentBoundary()"
.Vb 1
\&    getDocumentBoundary();
.Ve
.PP
The method returns the value of the \f(CW\*(C`DOCUMENT_BONDARY\*(C'\fR option.
.SS "\fIgetParsingDirection()\fP"
.IX Subsection "getParsingDirection()"
.Vb 1
\&    getParsingDirection();
.Ve
.PP
The method returns the value of the \f(CW\*(C`PARSING_DIRECTION\*(C'\fR option.
.SS "\fIMatchTypeValue()\fP"
.IX Subsection "MatchTypeValue()"
.Vb 1
\&    MatchTypeValue();
.Ve
.PP
The method returns the value of the \f(CW\*(C`match\-type\*(C'\fR option.
.SS "\fIreadFromFile()\fP"
.IX Subsection "readFromFile()"
.Vb 1
\&    readFromFile($file);
.Ve
.PP
The method reads the configuration file and set the options defined is
the \f(CW\*(C`DefaultConfig\*(C'\fR section. The option \f(CW\*(C`PHRASE_MAXIMUM_LENGTH\*(C'\fR is
checked and set to a default value if the option is not specified in
the configuration file.
.PP
The configuration file \f(CW$file\fR is a \f(CW\*(C`Lingua::YaTeA::File\*(C'\fR object.
.SS "\fIcheckMaxLength()\fP"
.IX Subsection "checkMaxLength()"
.Vb 1
\&    checkMaxLength();
.Ve
.PP
The method checks if the option \f(CW\*(C`PHRASE_MAXIMUM_LENGTH\*(C'\fR is set in the
configuration and sets it to a default value (\f(CW12\fR).
.SS "\fIgetMaxLength()\fP"
.IX Subsection "getMaxLength()"
.Vb 1
\&    getMaxLength();
.Ve
.PP
The method returns the value of the \f(CW\*(C`PHRASE_MAXIMUM_LENGTH\*(C'\fR option.
.SS "\fIgetCompulsory()\fP"
.IX Subsection "getCompulsory()"
.Vb 1
\&    getCompulsory();
.Ve
.PP
The method returns the value of the \f(CW\*(C`COMPULSORY_ITEM\*(C'\fR option.
.SS "\fIgetSuffix()\fP"
.IX Subsection "getSuffix()"
.Vb 1
\&    getSuffix();
.Ve
.PP
The method returns the value of the \f(CW\*(C`suffix\*(C'\fR option.
.SS "\fIgetDisplayLanguage()\fP"
.IX Subsection "getDisplayLanguage()"
.Vb 1
\&    getDisplayLanguage();
.Ve
.PP
The method returns the value of the \f(CW\*(C`MESSAGE_DISPLAY\*(C'\fR option.
.SS "\fIgetDefaultOutput()\fP"
.IX Subsection "getDefaultOutput()"
.Vb 1
\&    getDefaultOutput();
.Ve
.PP
The method returns the value of the \f(CW\*(C`default_output\*(C'\fR option.
.SS "\fIsetMatchType()\fP"
.IX Subsection "setMatchType()"
setMatchType($match_type);
.PP
The method adds or updates the type of matching \f(CW$match_type\fR)
i.e. the option \f(CW\*(C`match\-type\*(C'\fR.
.SS "\fIgetTermListStyle()\fP"
.IX Subsection "getTermListStyle()"
The method returns the value of the \f(CW\*(C`termList\*(C'\fR option.
.SS "\fIgetTTGStyle()\fP"
.IX Subsection "getTTGStyle()"
The method returns the value of the \f(CW\*(C`TTG\-style\-term\-candidates\*(C'\fR option.
.SS "\fIgetOutputPath()\fP"
.IX Subsection "getOutputPath()"
The method returns the value of the \f(CW\*(C`output\-path\*(C'\fR option.
.SS "\fIsetDefaultOutputPath()\fP"
.IX Subsection "setDefaultOutputPath()"
.Vb 1
\&    setDefaultOutputPath();
.Ve
.PP
The method sets the current directory ("\f(CW\*(C`.\*(C'\fR") as default output
directory if the option is not output-path.
.SS "\fIdisable()\fP"
.IX Subsection "disable()"
.Vb 1
\&    disable($option_name,$message_set,$display_language);
.Ve
.PP
The methods disables the option \f(CW$option_name\fR.
.PP
The variables \f(CW$message_set\fR and \f(CW$display_language\fR are used for
displaying a warning or error message.
.SS "\fIenable()\fP"
.IX Subsection "enable()"
.Vb 1
\&    enable($option_name,$option_value,$message_set,$display_language);
.Ve
.PP
The method enables the option \f(CW$option_name\fR with the value
\&\f(CW$option_value\fR if the option does not exist.
.PP
The variables \f(CW$message_set\fR and \f(CW$display_language\fR are used for
displaying a warning or error message.
.SS "\fIhandleOptionDependencies()\fP"
.IX Subsection "handleOptionDependencies()"
.Vb 1
\&    handleOptionDependencies($message_set);
.Ve
.PP
The method checks the dependencies between the options.
.PP
Options \f(CW\*(C`TC\-for\-BioLG\*(C'\fR and \f(CW\*(C`debug\*(C'\fR are incompatibles, while both the
options \f(CW\*(C`termino\*(C'\fR and \f(CW\*(C`match\-type\*(C'\fR with the value \f(CW\*(C`strict\*(C'\fR must be
specified.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sophie Aubin and Thierry Hamon. Improving Term Extraction with
Terminological Resources. In Advances in Natural Language Processing
(5th International Conference on \s-1NLP\s0, FinTAL 2006). pages
380\-387. Tapio Salakoski, Filip Ginter, Sampo Pyysalo, Tapio Pahikkala
(Eds). August 2006. \s-1LNAI\s0 4139.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thierry Hamon <thierry.hamon@univ\-paris13.fr> and Sophie Aubin <sophie.aubin@lipn.univ\-paris13.fr>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Thierry Hamon and Sophie Aubin
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
