.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::YaTeA::ParsingPattern 3pm"
.TH Lingua::YaTeA::ParsingPattern 3pm "2015-01-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::YaTeA::ParsingPattern \- Perl extension for parsing pattern
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Lingua::YaTeA::ParsingPattern;
\&  Lingua::YaTeA::ParsingPattern\->new($parse,$pos_sequence,$node_set,$priority,$direction,$num_content_words,$num_line);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module implements a parsing pattern, i.e. the structure used to
parse noun phrases or identify reliability islands. Several field
decribe it. \f(CW\*(C`PARSE\*(C'\fR is the string defining the parsing pattern, and
\&\f(CW\*(C`NODE_SET\*(C'\fR is the tree representing the parsing pattern. The priority
of the parsing pattern is recorded in the field \f(CW\*(C`PRIORITY\*(C'\fR. The field
\&\f(CW\*(C`PARSING_DIRECTION\*(C'\fR contains the parsing direction of the
pattern. The field \f(CW\*(C`DELARACTION_LINE\*(C'\fR is the line number of the
parsing pattern in the file. the Part-Of-Speech sequence is stored in
the field \f(CW\*(C`POS_SEQUENCE\*(C'\fR and the number of content words is recorded
in the field \f(CW\*(C`CONTENT_WORDS\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&    new($parse,$pos_sequence,$node_set,$priority,$direction,$num_content_words,$num_line);
.Ve
.PP
The method creates a new parsing pattern. The field \f(CW\*(C`PARSE\*(C'\fR is set
with \f(CW$parse\fR. \f(CW$pos_sequence\fR sets the field \f(CW\*(C`POS_SEQUENCE\*(C'\fR. the
fiekd \f(CW\*(C`NODE_SET\*(C'\fR is set with \f(CW$node_set\fR. \f(CW$priority\fR is the value
of the field \f(CW\*(C`PRIORITY\*(C'\fR. The direction of parsing
(\f(CW\*(C`PARSING_DIRECTION\*(C'\fR) is set with \f(CW$direction\fR. The variable
\&\f(CW$num_line\fR sets the field \f(CW\*(C`DECLARATION_LINE\*(C'\fR, and the field
\&\f(CW\*(C`CONTENT_WORDS\*(C'\fR is set with \f(CW$num_content_words\fR.
.SS "\fIsetNodeSet()\fP"
.IX Subsection "setNodeSet()"
.Vb 1
\&    setNodeSet($node_set);
.Ve
.PP
This method sets the node set (field \f(CW\*(C`NODE_SET\*(C'\fR).
.SS "\fIgetParse()\fP"
.IX Subsection "getParse()"
.Vb 1
\&    getParse();
.Ve
.PP
The method returns the string designing the parsing pattern (field
\&\f(CW\*(C`PARSE\*(C'\fR).
.SS "\fIgetLength()\fP"
.IX Subsection "getLength()"
.Vb 1
\&    getLength();
.Ve
.PP
The method returns the number of elements of the parsing patterns.
.SS "\fIgetPriority()\fP"
.IX Subsection "getPriority()"
.Vb 1
\&    getPriority();
.Ve
.PP
The method returns the priority of the parsing pattern (field
\&\f(CW\*(C`PRIORITY\*(C'\fR).
.SS "\fIgetDirection()\fP"
.IX Subsection "getDirection()"
.Vb 1
\&    getDirection();
.Ve
.PP
The method returns the parsing direction of the parsing pattern (field
\&\f(CW\*(C`PARSING_DIRECTIONa\*(C'\fR).
.SS "\fIgetNodeSet()\fP"
.IX Subsection "getNodeSet()"
.Vb 1
\&    getNodeSet();
.Ve
.PP
The method returns the set of nodes corresponding to the parsing
pattern (field \f(CW\*(C`NODE_SET\*(C'\fR).
.SS "\fIgetNumContentWords()\fP"
.IX Subsection "getNumContentWords()"
.Vb 1
\&    getNumContentWords();
.Ve
.PP
The method returns the number of content words of the parsing pattern
(field \f(CW\*(C`CONTENT_WORD\*(C'\fR).
.SS "\fIgetPOSSequence()\fP"
.IX Subsection "getPOSSequence()"
.Vb 1
\&    getPOSSequence();
.Ve
.PP
The method returns the Part-Of-Speech sequence of the parsing pattern
(field \f(CW\*(C`POS_SEQUENCE\*(C'\fR).
.SS "\fIprint()\fP"
.IX Subsection "print()"
.Vb 1
\&    print();
.Ve
.PP
The method prints the information related to the parsing pattern.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sophie Aubin and Thierry Hamon. Improving Term Extraction with
Terminological Resources. In Advances in Natural Language Processing
(5th International Conference on \s-1NLP\s0, FinTAL 2006). pages
380\-387. Tapio Salakoski, Filip Ginter, Sampo Pyysalo, Tapio Pahikkala
(Eds). August 2006. \s-1LNAI\s0 4139.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thierry Hamon <thierry.hamon@univ\-paris13.fr> and Sophie Aubin <sophie.aubin@lipn.univ\-paris13.fr>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Thierry Hamon and Sophie Aubin
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
