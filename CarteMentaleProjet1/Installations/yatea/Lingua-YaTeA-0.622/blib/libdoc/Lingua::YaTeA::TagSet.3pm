.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::YaTeA::TagSet 3pm"
.TH Lingua::YaTeA::TagSet 3pm "2015-01-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::YaTeA::TagSet \- Perl extension for managing the set of Part\-of\-Speech
tags and inflected that can be accepted in the terms.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Lingua::YaTeA::TagSet;
\&  Lingua::YaTeA::TagSet\->new();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for managing a set of Part-of-Speech tags
of inflected forms that can be accepted in the terms to extract. Such
lists of tags or inflected form are used by the Parsing Patterns while
the syntactic analusys of the maximal noun phrases. This information
is generally stored in the c<TagSet> configuration file. The
definition of the different classes is provided: \f(CW\*(C`CANDIDATES}\*(C'\fR(the content words),
\&\f(CW\*(C`DETERMINERS\*(C'\fR (the determiner words), \f(CW\*(C`PREPOSITIONS\*(C'\fR (the preposition words) and \f(CW\*(C`COORDINATIONS\*(C'\fR (the coordination words).
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 2
\&    $file = "/home/thierry/YaTeAconfig/EN/TagSet";
\&    new($file);
.Ve
.PP
This method creates an object with 5 fields \f(CW\*(C`CANDIDATES\*(C'\fR,
\&\f(CW\*(C`PREPOSITIONS\*(C'\fR, \f(CW\*(C`DETERMINERS\*(C'\fR, \f(CW\*(C`COORDINATIONS\*(C'\fR, \f(CW\*(C`ANY\*(C'\fR and loads
the tags contained in the file \f(CW$file\fR. The field \f(CW\*(C`ANY\*(C'\fR contains all
the tags. A field designates a class of tags and is a hash table.
.SS "\fIloadTags()\fP"
.IX Subsection "loadTags()"
.Vb 1
\&    loadTags($file);
.Ve
.PP
This method opens the file \f(CW$file\fR and loads all the tagsets.
.SS "\fIaddTag()\fP"
.IX Subsection "addTag()"
.Vb 1
\&    addTag($subset,$tag);
.Ve
.PP
This method stores the tag \f(CW$tag\fR in the right class \f(CW$subset\fR.
.SS "\fIgetSubset()\fP"
.IX Subsection "getSubset()"
.Vb 1
\&    getSubset($subset);
.Ve
.PP
This method returns the field of the current object that contains tags
of the class \f(CW$subset\fR.
.SS "\fIgetTagList()\fP"
.IX Subsection "getTagList()"
.Vb 1
\&    getTagList($subset);
.Ve
.PP
This method returns all the tags of the class \f(CW$subset\fR.
.SS "\fIexistTag()\fP"
.IX Subsection "existTag()"
.Vb 1
\&    existTag($subset,$tag);
.Ve
.PP
This methods indicates whether the tag \f(CW$tag\fR exists in the subset of
tags \f(CW$subset\fR (it returns the value 1) or not (its returns the value
0). The field of the objet corresponding to the structure is set.
.SS "\fIparseSubset()\fP"
.IX Subsection "parseSubset()"
.Vb 1
\&    parseSubset($line);
.Ve
.PP
This method parses a line containing the definition of a subset of
tags. it sets the corresponding field in the object calling the
method. In case of an error of format, the method dies.
.SS "\fImakeALL()\fP"
.IX Subsection "makeALL()"
.Vb 1
\&    makeALL($subset, \e@tags);
.Ve
.PP
The method sets the field \f(CW\*(C`ALL\*(C'\fR of the subset \f(CW$subset\fR with the
 tags contained in the array \f(CW\*(C`\e@tags\*(C'\fR given by reference. This field
 is a string containg a regex. Each tag is an alternative.
.SS "\fIsort()\fP"
.IX Subsection "sort()"
.Vb 1
\&    sort(\e@tags);
.Ve
.PP
The method returns a regex where each element of the array given by
reference is a alternative and is sorted.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sophie Aubin and Thierry Hamon. Improving Term Extraction with
Terminological Resources. In Advances in Natural Language Processing
(5th International Conference on \s-1NLP\s0, FinTAL 2006). pages
380\-387. Tapio Salakoski, Filip Ginter, Sampo Pyysalo, Tapio Pahikkala
(Eds). August 2006. \s-1LNAI\s0 4139.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thierry Hamon <thierry.hamon@univ\-paris13.fr> and Sophie Aubin <sophie.aubin@lipn.univ\-paris13.fr>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Thierry Hamon and Sophie Aubin
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
