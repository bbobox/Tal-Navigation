.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::YaTeA::WordFromCorpus 3pm"
.TH Lingua::YaTeA::WordFromCorpus 3pm "2015-01-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::YaTeA::WordFromCorpus \- Perl extension for managing word of the corpus and related information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Lingua::YaTeA::WordFromCorpus;
\&  Lingua::YaTeA::WordFromCorpus\->new($form,$lexicon,$sentences);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module manages the word occurrence \f(CW$form\fR of the corpus
(\f(CW$form\fR is the inflected form of the word). It associates an
identifier (field \f(CW\*(C`ID\*(C'\fR), the word entry of the lexicon \f(CW$lexicon\fR
(field \f(CW\*(C`LEX_ITEM\*(C'\fR), the sentence (from the sentence set
\&\f(CW$sentences\fR) where the word occurrs (field \f(CW\*(C`SENTENCE\*(C'\fR) and the
offset of the word in the sentence (\f(CW\*(C`START_CHAR\*(C'\fR).
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&    new($form,$lexicon,$sentences);
.Ve
.PP
The method creates the objet correspoding to the word
\&\f(CW$form\fR. \f(CW$lexicon\fR and \f(CW$sentences\fR are used to set the fields
\&\f(CW\*(C`LEX_ITEM\*(C'\fR and \f(CW\*(C`SENTENCE\*(C'\fR respectively.
.SS "\fIsetLexItem()\fP"
.IX Subsection "setLexItem()"
.Vb 1
\&    setLexItem($form, $lexicon);
.Ve
.PP
The method sets the field \f(CW\*(C`LEX_ITEM\*(C'\fR of the word \f(CW$form\fR with the
corresponding item in the lexicon \f(CW$lexicon\fR.
.SS "\fIgetID()\fP"
.IX Subsection "getID()"
.Vb 1
\&    getID();
.Ve
.PP
The method returns the identifier of the current word.
.SS "\fIgetSentence()\fP"
.IX Subsection "getSentence()"
.Vb 1
\&    getSentence();
.Ve
.PP
The method return the sentence where occurs the current word.
.SS "\fIgetDocument()\fP"
.IX Subsection "getDocument()"
.Vb 1
\&    getDocument();
.Ve
.PP
The method return the document where occurs the current word.
.SS "\fIgetSentenceID()\fP"
.IX Subsection "getSentenceID()"
.Vb 1
\&    getSentenceID();
.Ve
.PP
The method return the identifier of the sentence where occurs the current word.
.SS "\fIgetDocumentID()\fP"
.IX Subsection "getDocumentID()"
.Vb 1
\&    getDocumentID();
.Ve
.PP
The method return the identifier of the document where occurs the current word.
.SS "\fIgetStartChar()\fP"
.IX Subsection "getStartChar()"
.Vb 1
\&    getStartChar();
.Ve
.PP
The method returns the offset (field \f(CW\*(C`START_CHAR\*(C'\fR) of the word in the
sentence.
.SS "\fIgetLexItem()\fP"
.IX Subsection "getLexItem()"
.Vb 1
\&    getLexItem();
.Ve
.PP
The method returns the lexicon item (field \f(CW\*(C`LEX_ITEM\*(C'\fR) correspondig
to the current word.
.SS "\fIisSentenceBoundary()\fP"
.IX Subsection "isSentenceBoundary()"
.Vb 1
\&    isSentenceBoundary($sentence_boundary);
.Ve
.PP
The methods indicates if the word is a sentence boundary (sentence
boundary is a string).
.SS "\fIisDocumentBoundary()\fP"
.IX Subsection "isDocumentBoundary()"
.Vb 1
\&    isDocumentBoundary($sentence_boundary);
.Ve
.PP
The methods indicates if the word is a document boundary (sentence
boundary is a string).
.SS "\fIupdateSentence()\fP"
.IX Subsection "updateSentence()"
.Vb 1
\&    updateSentence($sentences);
.Ve
.PP
The method updates the field \f(CW\*(C`SENTENCE\*(C'\fR regarding to the sentence set
(\f(CW\*(C`sentences\*(C'\fR).
.SS "\fIupdateStartChar()\fP"
.IX Subsection "updateStartChar()"
.Vb 1
\&    updateSentence();
.Ve
.PP
The method updates the field \f(CW\*(C`START_CHAR\*(C'\fR regarding to the value of
the current offset in the sentence.
.SS "\fIisChunkingFrontier()\fP"
.IX Subsection "isChunkingFrontier()"
.Vb 1
\&    isChunkingFrontier($chunking_data);
.Ve
.PP
The method indicates if the current word is a chunking frontier
according to the defined chunking data (\f(CW$chunking_data\fR).
.SS "\fIisChunkingException()\fP"
.IX Subsection "isChunkingException()"
.Vb 1
\&    isChunkingException($chunking_data);
.Ve
.PP
The method indicates if the current word is a chunking exception
according to the defined chunking data (\f(CW$chunking_data\fR).
.SS "\fIisCleaningFrontier()\fP"
.IX Subsection "isCleaningFrontier()"
.Vb 1
\&    isCleaningFrontier($chunking_data);
.Ve
.PP
The method indicates if the current word is a cleaning frontier
according to the defined chunking data (\f(CW$chunking_data\fR).
.SS "\fIisCleaningException()\fP"
.IX Subsection "isCleaningException()"
.Vb 1
\&    isCleaningException($chunking_data);
.Ve
.PP
The method indicates if the current word is a cleaning exception
according to the defined chunking data (\f(CW$chunking_data\fR).
.SS "\fIisCompulsory()\fP"
.IX Subsection "isCompulsory()"
.Vb 1
\&    izCompulsory($compulsory);
.Ve
.PP
The method indicates if the Part-Of-Speech (\s-1POS\s0) tag of the current
word is one of the required \s-1POS\s0 tag that must appear in a term.
.SS "\fIgetPOS()\fP"
.IX Subsection "getPOS()"
.Vb 1
\&    getPOS();
.Ve
.PP
The methods returns the Part-Of-Speech tag of the current word.
.SS "\fIisEndTrigger()\fP"
.IX Subsection "isEndTrigger()"
.Vb 1
\&    isEndTrigger($end_trigger_set);
.Ve
.PP
the method indicates if the word is at the end of a trigger (see
\&\f(CW\*(C`Lingua::YaTeA::TriggerSet\*(C'\fR and \f(CW\*(C`Lingua::YaTeA::Trigger\*(C'\fR).
.SS "\fIisStartTrigger()\fP"
.IX Subsection "isStartTrigger()"
.Vb 1
\&    isStartTrigger($start_trigger_set);
.Ve
.PP
the method indicates if the word is at the start of a trigger (see
\&\f(CW\*(C`Lingua::YaTeA::TriggerSet\*(C'\fR and \f(CW\*(C`Lingua::YaTeA::Trigger\*(C'\fR).
.SS "\fIgetIF()\fP"
.IX Subsection "getIF()"
.Vb 1
\&    getIF();
.Ve
.PP
The methods returns the inflected form of the current word.
.SS "\fIgetLF()\fP"
.IX Subsection "getLF()"
.Vb 1
\&    getLF();
.Ve
.PP
The methods returns the lemmatised form of the current word.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sophie Aubin and Thierry Hamon. Improving Term Extraction with
Terminological Resources. In Advances in Natural Language Processing
(5th International Conference on \s-1NLP\s0, FinTAL 2006). pages
380\-387. Tapio Salakoski, Filip Ginter, Sampo Pyysalo, Tapio Pahikkala
(Eds). August 2006. \s-1LNAI\s0 4139.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thierry Hamon <thierry.hamon@univ\-paris13.fr> and Sophie Aubin <sophie.aubin@lipn.univ\-paris13.fr>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Thierry Hamon and Sophie Aubin
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
